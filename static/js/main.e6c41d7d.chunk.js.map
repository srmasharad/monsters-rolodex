{"version":3,"sources":["components/navBar.jsx","components/common/appLoader.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","title","user","className","id","Navbar","bg","variant","to","Toggle","aria-controls","Collapse","Nav","JSON","parse","email","PageLoader","Spinner","animation","size","SignUpForm","lazy","Logout","LoginComponent","MonsterDetailView","MonstersComponent","AboutComponent","PageNotFound","App","state","localStorage","getItem","this","setState","Fragment","Container","fluid","fallback","path","component","exact","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8UA6CeA,EAzCA,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACrB,OACI,4BAAQC,UAAU,cAAcC,GAAG,YAC/B,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACtB,kBAAC,IAAD,CAAMC,GAAG,IAAIL,UAAU,gBAAgBF,GACvC,kBAACI,EAAA,EAAOI,OAAR,CAAeC,gBAAc,qBAC7B,kBAACL,EAAA,EAAOM,SAAR,CAAiBP,GAAG,oBAChB,kBAACQ,EAAA,EAAD,CAAKT,UAAU,WACX,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAASK,GAAG,IAAIL,UAAU,YAA1B,SAEJ,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAASK,GAAG,SAASL,UAAU,YAA/B,WAGR,kBAACS,EAAA,EAAD,CAAKT,UAAU,aACTD,GAAQ,oCACN,wBAAIC,UAAU,YACV,kBAAC,IAAD,CAASK,GAAG,SAASL,UAAU,mBAA/B,UAEJ,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAASK,GAAG,UAAUL,UAAU,mBAAhC,aAGPD,GACD,oCACI,wBAAIC,UAAU,YACV,kBAAC,IAAD,CAASK,GAAG,WAAWL,UAAU,YAAYU,KAAKC,MAAMZ,GAAMa,QAElE,wBAAIZ,UAAU,YACV,kBAAC,IAAD,CAASK,GAAG,UAAUL,UAAU,kBAAhC,iB,gBCpBjBa,EAXI,WACf,OACI,yBAAKb,UAAU,qBACX,yBAAKA,UAAU,kBACX,+CACA,kBAACc,EAAA,EAAD,CAASC,UAAU,SAASX,QAAQ,QAAQY,KAAK,UCD3DC,EAAaC,gBAAK,kBAAM,wDACxBC,EAASD,gBAAK,kBAAM,kCACpBE,EAAkBF,gBAAK,kBAAM,uDAC7BG,EAAoBH,gBAAK,kBAAM,iCAC/BI,EAAoBJ,gBAAK,kBAAM,iCAC/BK,EAAiBL,gBAAK,kBAAM,iCAC5BM,EAAeN,gBAAK,kBAAM,kCAqCjBO,E,2MAjCdC,MAAQ,G,mFAGP,IAAM3B,EAAO4B,aAAaC,QAAQ,SAClCC,KAAKC,SAAS,CAAE/B,W,+BAGR,IACAA,EAAS8B,KAAKH,MAAd3B,KACR,OACC,kBAAC,IAAMgC,SAAP,KACC,kBAAC,EAAD,CAAQjC,MAAM,kBAAkBC,KAAMA,IACtC,0BAAMC,UAAU,aACf,kBAACgC,EAAA,EAAD,CAAWC,OAAK,GACf,kBAAC,WAAD,CAAUC,SAAU,kBAAC,EAAD,OACnB,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,KAAK,UAAUC,UAAWnB,IACjC,kBAAC,IAAD,CAAOkB,KAAK,UAAUC,UAAWjB,IACjC,kBAAC,IAAD,CAAOgB,KAAK,SAASC,UAAWhB,IAChC,kBAAC,IAAD,CAAOe,KAAK,gBAAgBC,UAAWf,IACvC,kBAAC,IAAD,CAAOc,KAAK,IAAIE,OAAK,EAACD,UAAWd,IACjC,kBAAC,IAAD,CAAOa,KAAK,SAASC,UAAWb,IAChC,kBAAC,IAAD,CAAOY,KAAK,gBAAgBC,UAAWZ,IACvC,kBAAC,IAAD,CAAUnB,GAAG,2B,GAxBHiC,aCJEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDsHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e6c41d7d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink, Link } from 'react-router-dom';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\n\r\nconst Header = ({ title, user }) => {    \r\n    return ( \r\n        <header className=\"site-header\" id=\"masthead\">\r\n            <Navbar bg=\"dark\" variant=\"dark\">\r\n                <Link to=\"/\" className=\"navbar-brand\">{title}</Link>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <li className=\"nav-item\">\r\n                            <NavLink to=\"/\" className=\"nav-link\">Home</NavLink>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <NavLink to=\"/about\" className=\"nav-link\">About</NavLink>\r\n                        </li>\r\n                    </Nav>\r\n                    <Nav className=\"rightNav\">\r\n                        {!user && <>\r\n                            <li className=\"nav-item\">\r\n                                <NavLink to=\"/login\" className=\"btn btn-warning\">Login</NavLink>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <NavLink to=\"/signup\" className=\"btn btn-warning\">Sign Up</NavLink>\r\n                            </li>\r\n                        </>}\r\n                        {user && \r\n                        <>\r\n                            <li className=\"nav-item\">\r\n                                <NavLink to=\"/profile\" className=\"nav-link\">{JSON.parse(user).email}</NavLink>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <NavLink to=\"/logout\" className=\"btn btn-danger\">Logout</NavLink>\r\n                            </li>\r\n                        </>\r\n                        }\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        </header>\r\n    );\r\n}\r\n \r\nexport default Header;","import React from 'react';\r\nimport { Spinner } from 'react-bootstrap';\r\n\r\nconst PageLoader = () => {\r\n    return (\r\n        <div className=\"app-loaderContent\">\r\n            <div className=\"spinnerWrapper\">\r\n                <h6>Monster Rolodex</h6>\r\n                <Spinner animation=\"border\" variant=\"light\" size=\"sm\"/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default PageLoader;","import React, {lazy, Suspense, Component} from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { Container } from 'react-bootstrap';\nimport Header from './components/navBar';\nimport './App.css';\nimport PageLoader from './components/common/appLoader';\n\nconst SignUpForm = lazy(() => import('./components/signUp'));\nconst Logout = lazy(() => import('./components/logout'));\nconst LoginComponent =  lazy(() => import('./components/login'))\nconst MonsterDetailView = lazy(() => import('./components/monsterDetailView'));\nconst MonstersComponent = lazy(() => import('./components/monsters'));\nconst AboutComponent = lazy(() => import('./components/about'));\nconst PageNotFound = lazy(() => import('./components/pageNotFound'));\n\n\nclass App extends Component {\n\tstate = {}\n\n\tcomponentDidMount(){\n\t\tconst user = localStorage.getItem('token');\n\t\tthis.setState({ user })\n\t}\n\n\trender(){\n\t\tconst { user } = this.state;\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<Header title=\"Monster Rolodex\" user={user}/>\n\t\t\t\t<main className=\"site-main\">\n\t\t\t\t\t<Container fluid>\n\t\t\t\t\t\t<Suspense fallback={<PageLoader />}>\n\t\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t\t<Route path=\"/signup\" component={SignUpForm} />\n\t\t\t\t\t\t\t\t<Route path=\"/logout\" component={Logout} />\n\t\t\t\t\t\t\t\t<Route path=\"/login\" component={LoginComponent} />\n\t\t\t\t\t\t\t\t<Route path=\"/monsters/:id\" component={MonsterDetailView} />\n\t\t\t\t\t\t\t\t<Route path=\"/\" exact component={MonstersComponent} />\n\t\t\t\t\t\t\t\t<Route path=\"/about\" component={AboutComponent} />\n\t\t\t\t\t\t\t\t<Route path=\"/pagenotfound\" component={PageNotFound}/>\n\t\t\t\t\t\t\t\t<Redirect to=\"/pagenotfound\" />\n\t\t\t\t\t\t\t</Switch>\n\t\t\t\t\t\t</Suspense>\n\t\t\t\t\t</Container>\n\t\t\t\t</main>\n\t\t\t</React.Fragment>\n\t\t)\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App /> \n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}