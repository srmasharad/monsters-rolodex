{"version":3,"sources":["components/login.jsx"],"names":["user","localStorage","getItem","LoginComponent","state","to","LoginSchema","Yup","shape","email","required","password","min","className","initialValues","validationSchema","onSubmit","values","actions","setSubmitting","setTimeout","formData","JSON","stringify","setItem","props","location","window","from","pathname","errors","isSubmitting","touched","src","alt","width","height","roundedCircle","type","name","placeholder","component","disabled","variant","block","animation","size","Component"],"mappings":"qPAMMA,EAAOC,aAAaC,QAAQ,SAE5BC,E,2MACFC,MAAQ,G,wEACE,IAAD,OACL,GAAGJ,EAAM,OAAO,kBAAC,IAAD,CAAUK,GAAG,MAE7B,IAAMC,EAAcC,WAAaC,MAAM,CACnCC,MAAOF,WAAaE,MAAM,iBAAiBC,SAAS,qBACpDC,SAAUJ,WAAaK,IAAI,EAAG,4BAA4BF,SAAS,0BAGvE,OACI,yBAAKG,UAAU,wBACX,kBAAC,IAAD,CACIC,cAAe,CAAEL,MAAO,GAAIE,SAAU,IACtCI,iBAAkBT,EAClBU,SAAU,SAACC,EAAQC,GACfA,EAAQC,eAAc,GACtBC,YAAW,WACP,IAAMC,EAAWC,KAAKC,UAAUN,EAAQ,KAAM,GAC9ChB,aAAauB,QAAQ,QAASH,GAC9BH,EAAQC,eAAc,GAHT,IAILf,EAAW,EAAKqB,MAAMC,SAAtBtB,MACRuB,OAAOD,SAAWtB,EAAQA,EAAMwB,KAAKC,SAAW,MACjD,QAGV,gBAAEC,EAAF,EAAEA,OAAQC,EAAV,EAAUA,aAAcC,EAAxB,EAAwBA,QAAxB,OACG,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,IAAG,6CAAgDpB,UAAU,gBAAgBqB,IAAI,WAAWC,MAAM,KAAKC,OAAO,KAAKC,eAAa,IACvI,wBAAIxB,UAAU,8BAAd,4BACA,yBAAKA,UAAU,cACX,kBAAC,IAAD,CAAOyB,KAAK,QAAQC,KAAK,QAAQ1B,UAAWiB,EAAOrB,MAAQ,0BAA6BuB,EAAQvB,MAAQ,wBAA0B,eAAiB+B,YAAY,kBAC9JV,EAAOrB,OAAS,kBAAC,IAAD,CAAc8B,KAAK,QAAQE,UAAU,MAAM5B,UAAU,sBAE1E,yBAAKA,UAAU,cACX,kBAAC,IAAD,CAAOyB,KAAK,WAAWC,KAAK,WAAW1B,UAAWiB,EAAOnB,SAAW,0BAA6BqB,EAAQrB,SAAW,wBAA0B,eAAiB6B,YAAY,aAC1KV,EAAOnB,UAAY,kBAAC,IAAD,CAAc4B,KAAK,WAAWE,UAAU,MAAM5B,UAAU,sBAEhF,kBAAC,IAAD,CAAQyB,KAAK,SAASI,SAAUX,EAAcY,QAAQ,UAAUC,OAAK,GAArE,WAA+Eb,GAAgB,kBAAC,IAAD,CAASc,UAAU,SAASF,QAAQ,QAAQG,KAAK,iB,GAtC3IC,aAgDd5C","file":"static/js/9.fb5e4be3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport{ Redirect } from 'react-router-dom';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport { Button, Image, Spinner } from 'react-bootstrap';\r\nimport * as Yup from 'yup';\r\n\r\nconst user = localStorage.getItem('token');\r\n\r\nclass LoginComponent extends Component {\r\n    state = {  }\r\n    render() { \r\n        if(user) return <Redirect to=\"/\" />\r\n\r\n        const LoginSchema = Yup.object().shape({\r\n            email: Yup.string().email('Invalid email').required('Email is required'),\r\n            password: Yup.string().min(8, 'Must be 8 character long').required('Password is required')\r\n        })\r\n\r\n        return (  \r\n            <div className=\"applicationForm-wrap\">\r\n                <Formik\r\n                    initialValues={{ email: '', password: ''}}\r\n                    validationSchema={LoginSchema}\r\n                    onSubmit={(values, actions) => {\r\n                        actions.setSubmitting(true);\r\n                        setTimeout(() => {\r\n                            const formData = JSON.stringify(values, null, 2);\r\n                            localStorage.setItem('token', formData);\r\n                            actions.setSubmitting(false);\r\n                            const { state } =  this.props.location;\r\n                            window.location = state ? state.from.pathname : '/';\r\n                        }, 2000)\r\n                    }}\r\n                >\r\n                {({errors, isSubmitting, touched}) => (\r\n                    <Form>\r\n                        <Image src={`https://robohash.org/2?set=set2&size=60x60`} className=\"mb-4 roboLogo\" alt=\"robohash\" width=\"72\" height=\"72\" roundedCircle/>\r\n                        <h5 className=\"h5 mb-3 font-weight-normal\">Login To Monster Rolodex</h5>\r\n                        <div className=\"form-group\">\r\n                            <Field type=\"email\" name=\"email\" className={errors.email ? 'form-control is-invalid' : (touched.email ? 'form-control is-valid' : 'form-control')} placeholder=\"Email address\"/>\r\n                            {errors.email && <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />}\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <Field type=\"password\" name=\"password\" className={errors.password ? 'form-control is-invalid' : (touched.password ? 'form-control is-valid' : 'form-control')} placeholder=\"Password\" />\r\n                            {errors.password && <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />}\r\n                        </div>\r\n                        <Button type=\"submit\" disabled={isSubmitting} variant=\"primary\" block>Sign In {isSubmitting && <Spinner animation=\"border\" variant=\"light\" size=\"sm\" />}</Button>\r\n                    </Form>\r\n                )}\r\n                </Formik>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n \r\nexport default LoginComponent;"],"sourceRoot":""}